From b814bbb90a1c700b399a62022176d9dcce672f16 Mon Sep 17 00:00:00 2001
From: prharvey <2677507+prharvey@users.noreply.github.com>
Date: Sat, 11 Nov 2023 20:43:21 -0800
Subject: [PATCH 1/3] Change reachable creature visitor to a search you can
 terminate, and include faciton information to further optimize it. Use the
 search to optimize parrot_at_danger.

---
 src/map.cpp       |  2 +-
 src/map.h         | 39 +++++++++++++++++++++++++++------------
 src/monattack.cpp |  9 +++++----
 src/monmove.cpp   | 15 ++++++++-------
 4 files changed, 41 insertions(+), 24 deletions(-)

diff --git a/src/map.cpp b/src/map.cpp
index ef4b03333aa2e..f089ed1f5211e 100644
--- a/src/map.cpp
+++ b/src/map.cpp
@@ -10325,7 +10325,7 @@ void map::flood_fill_zone( const Creature &origin )
         Creature *creature = tracker.creature_at<Creature>( loc );
         if( creature ) {
             const int n = zone_number * zone_tick;
-            creatures_by_zone[n].push_back( creature );
+            creatures_by_zone_and_faction[n][creature->get_monster_faction()].push_back( creature );
             creature->set_reachable_zone( n );
         }
     } );
diff --git a/src/map.h b/src/map.h
index 17dbf6727d42b..7284f48a84aae 100644
--- a/src/map.h
+++ b/src/map.h
@@ -2243,14 +2243,15 @@ class map
         bool visitable_cache_dirty = false;
         int zone_number = 1;
         int zone_tick = 1;
-        std::unordered_map<int, std::vector<Creature *>> creatures_by_zone;
+        std::unordered_map < int, std::unordered_map<mfaction_id, std::vector<Creature *>>>
+        creatures_by_zone_and_faction;
         std::unordered_set<Creature *> to_remove;
 
         void flood_fill_zone( const Creature &origin );
 
         void flood_fill_if_needed( const Creature &origin ) {
             if( get_visitable_zones_cache_dirty() ) {
-                creatures_by_zone.clear();
+                creatures_by_zone_and_faction.clear();
                 to_remove.clear();
                 zone_tick = zone_tick > 0 ? -1 : 1;
                 set_visitable_zones_cache_dirty( false );
@@ -2273,20 +2274,34 @@ class map
             to_remove.insert( creature );
         }
 
-        template <typename Functor>
-        void visit_reachable_creatures( const Creature &origin, Functor f ) {
+        template <typename FactionPredicate, typename CreaturePredicate>
+        Creature *find_reachable_creature_matching_faction_and_creature_predicate( const Creature &origin,
+                FactionPredicate p, CreaturePredicate f ) {
             flood_fill_if_needed( origin );
-            const auto map_iter = creatures_by_zone.find( origin.get_reachable_zone() );
-            if( map_iter != creatures_by_zone.end() ) {
-                auto vector_iter = map_iter->second.begin();
-                const auto vector_end = map_iter->second.end();
-                for( ; vector_iter != vector_end; ++vector_iter ) {
-                    Creature *other = *vector_iter;
-                    if( to_remove.count( other ) == 0 ) {
-                        f( *other );
+            const auto map_iter = creatures_by_zone_and_faction.find( origin.get_reachable_zone() );
+            if( map_iter != creatures_by_zone_and_faction.end() ) {
+                for( const auto& [faction, creatures] : map_iter->second ) {
+                    if( !p( faction ) ) {
+                        continue;
+                    }
+                    for( Creature *other : creatures ) {
+                        if( to_remove.count( other ) == 0 ) {
+                            if( f( *other ) ) {
+                                return other;
+                            }
+                        }
                     }
                 }
             }
+            return nullptr;
+        }
+
+        template <typename CreaturePredicate>
+        Creature *find_reachable_creature( const Creature &origin, CreaturePredicate f ) {
+            return find_reachable_creature_matching_faction_and_creature_predicate( origin, [](
+            const mfaction_id & faction ) {
+                return true;
+            }, std::move( f ) );
         }
 
         void queue_main_cleanup();
diff --git a/src/monattack.cpp b/src/monattack.cpp
index 443c1854d94f4..a4316076f884a 100644
--- a/src/monattack.cpp
+++ b/src/monattack.cpp
@@ -4505,13 +4505,12 @@ bool mattack::parrot( monster *z )
 
 bool mattack::parrot_at_danger( monster *parrot )
 {
-    for( Creature &creature : g->all_creatures() ) {
-        if( !creature.is_hallucination() ) {
+    if( get_map().find_reachable_creature( *parrot, [parrot]( Creature & creature ) {
+    if( !creature.is_hallucination() ) {
             if( creature.is_avatar() || creature.is_npc() ) {
                 Character *character = creature.as_character();
                 if( one_in( 20 ) && character->attitude_to( *parrot ) == Creature::Attitude::HOSTILE &&
                     parrot->sees( *character ) ) {
-                    parrot_common( parrot );
                     return true;
                 }
             } else {
@@ -4520,11 +4519,13 @@ bool mattack::parrot_at_danger( monster *parrot )
                                       ( monster->anger > 0 &&
                                         monster->faction->attitude( parrot->faction ) == mf_attitude::MFA_BY_MOOD ) ) &&
                     parrot->sees( *monster ) ) {
-                    parrot_common( parrot );
                     return true;
                 }
             }
         }
+    } ) ) {
+        parrot_common( parrot );
+        return true;
     }
 
     return false;
diff --git a/src/monmove.cpp b/src/monmove.cpp
index f57268d64a38b..edb67bb3e7ae6 100644
--- a/src/monmove.cpp
+++ b/src/monmove.cpp
@@ -599,14 +599,14 @@ void monster::plan()
                                  turns_since_target );
     int turns_to_skip = max_turns_to_skip * rate_limiting_factor;
     if( friendly == 0 && ( turns_to_skip == 0 || turns_since_target % turns_to_skip == 0 ) ) {
-        here.visit_reachable_creatures( *this, [this, &seen_levels, &mon_plan,
-              &valid_targets]( Creature & other ) {
-            mf_attitude faction_att = faction.obj().attitude( other.get_monster_faction() );
-            if( faction_att == MFA_NEUTRAL || faction_att == MFA_FRIENDLY ) {
-                return;
-            }
+        here.find_reachable_creature_matching_faction_and_creature_predicate( *this, [this](
+        const mfaction_id & id ) {
+            mf_attitude faction_att = faction->attitude( id );
+            return faction_att != MFA_NEUTRAL && faction_att != MFA_FRIENDLY;
+        },
+        [this, &seen_levels, &mon_plan, &valid_targets]( Creature & other ) {
             if( !seen_levels.test( other.posz() + OVERMAP_DEPTH ) ) {
-                return;
+                return false;
             }
             float rating = rate_target( other, mon_plan.dist, mon_plan.smart_planning );
             if( rating == mon_plan.dist ) {
@@ -632,6 +632,7 @@ void monster::plan()
             if( !mon_plan.fleeing && valid_targets != 0 ) {
                 morale -= mon_plan.fears_hostile_seen;
             }
+            return false;
         } );
     }
     if( mon_plan.target == nullptr ) {

From d6235addc3204f2bcb34156c4b09e473407e753c Mon Sep 17 00:00:00 2001
From: prharvey <2677507+prharvey@users.noreply.github.com>
Date: Sat, 11 Nov 2023 21:10:41 -0800
Subject: [PATCH 2/3] Fix missing return. I accidently unstashed an old set of
 changes...

---
 src/monattack.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/monattack.cpp b/src/monattack.cpp
index a4316076f884a..ce0110a367d18 100644
--- a/src/monattack.cpp
+++ b/src/monattack.cpp
@@ -4523,6 +4523,7 @@ bool mattack::parrot_at_danger( monster *parrot )
                 }
             }
         }
+        return false;
     } ) ) {
         parrot_common( parrot );
         return true;

From c69fca7e66cf3226568710b8e6b90a480f183fa1 Mon Sep 17 00:00:00 2001
From: prharvey <2677507+prharvey@users.noreply.github.com>
Date: Sat, 11 Nov 2023 21:52:05 -0800
Subject: [PATCH 3/3] Clang tidy fix.

---
 src/map.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/map.h b/src/map.h
index 7284f48a84aae..fd6ba5fb958b4 100644
--- a/src/map.h
+++ b/src/map.h
@@ -2299,7 +2299,7 @@ class map
         template <typename CreaturePredicate>
         Creature *find_reachable_creature( const Creature &origin, CreaturePredicate f ) {
             return find_reachable_creature_matching_faction_and_creature_predicate( origin, [](
-            const mfaction_id & faction ) {
+            const mfaction_id & ) {
                 return true;
             }, std::move( f ) );
         }
